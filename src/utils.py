from collections import deque
import sys
import streamlit as st
import re
import time
import copy # G·ª¢I √ù: Import th∆∞ vi·ªán copy ƒë·ªÉ t·∫°o b·∫£n sao s√¢u
from utils import *
import random

def kenre_python_literal(bando, w_h, w_c, p_h, p_c):
    m = len(bando)
    n = len(bando[0])
    
    # H√†ng ƒë·ª£i, t∆∞∆°ng ƒë∆∞∆°ng q_ready
    q_ready = deque([(w_h, w_c)])
    
    # Ma tr·∫≠n check
    check = [[False for _ in range(n)] for _ in range(m)]
    check[w_h][w_c] = False
    
    # Ma tr·∫≠n mark, d√πng ƒë·ªÉ l∆∞u √¥ cha c·ªßa √¥ hi·ªán t·∫°i 
    # Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã kh√¥ng h·ª£p l·ªá, v√≠ d·ª• (-1, -1)
    mark = [[(-1, -1) for _ in range(n)] for _ in range(m)]

    # 8 h∆∞·ªõng di chuy·ªÉn
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

    while q_ready:
        curr_h, curr_c = q_ready.popleft()

        # N·∫øu t√¨m th·∫•y ƒë√≠ch
        if curr_h == p_h and curr_c == p_c:
            temp = []
            hours = 0
            o_h, o_c = p_h, p_c
            while not (o_h == w_h and o_c == w_c):
                hours += 1
                temp.append((o_h, o_c))
                o_h, o_c = mark[o_h][o_c]

            return temp[::-1]# Tr·∫£ v·ªÅ s·ªë gi·ªù v√† ƒë∆∞·ªùng ƒëi t·ª´ ƒë√≠ch v·ªÅ ngu·ªìn

        # Duy·ªát 8 h∆∞·ªõng xung quanh
        for dr, dc in directions:
            next_h, next_c = curr_h + dr, curr_c + dc

            if (0 <= next_h < m and 0 <= next_c < n and
                bando[next_h][next_c] == 0 and not check[next_h][next_c]):
                
                # ƒê√°nh d·∫•u ƒë√£ thƒÉm
                check[next_h][next_c] = True
                # L∆∞u √¥ cha
                mark[next_h][next_c] = (curr_h, curr_c)
                # Th√™m v√†o h√†ng ƒë·ª£i
                q_ready.append((next_h, next_c))
    
    return -1 # Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi
def parse_matrix_from_text(text_data):
    matrix = []
    lines = text_data.strip().split('\n')
    try:
        for i, line in enumerate(lines):
            line = line.strip()
            if not line: continue
            row_str = re.split(r'\s+', line)
            row_int = [int(num) for num in row_str]
            if any(cell not in [0, 1] for cell in row_int):
                st.error(f"L·ªói ·ªü d√≤ng {i+1}: D·ªØ li·ªáu ch·ª©a gi√° tr·ªã kh√¥ng ph·∫£i 0 ho·∫∑c 1.")
                return None
            matrix.append(row_int)
        if not matrix:
            st.warning("D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng.")
            return None
        first_row_len = len(matrix[0])
        if any(len(r) != first_row_len for r in matrix):
            st.error("L·ªói: C√°c d√≤ng c√≥ s·ªë c·ªôt kh√¥ng ƒë·ªìng nh·∫•t.")
            return None
        # G·ª¢I √ù: B·ªè matrix.reverse() ƒëi. T·ªça ƒë·ªô (0,0) theo list index t·ª± nhi√™n l√† g√≥c tr√™n b√™n tr√°i.
        # ƒêi·ªÅu n√†y gi√∫p logic t·ªça ƒë·ªô nh·∫•t qu√°n h∆°n.
        return matrix
    except ValueError:
        st.error("L·ªói: D·ªØ li·ªáu ch·ª©a k√Ω t·ª± kh√¥ng ph·∫£i l√† s·ªë.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return None
def convert_matrix_to_text(matrix):
    """
    Chuy·ªÉn ƒë·ªïi m·ªôt ma tr·∫≠n (list of lists) th√†nh m·ªôt chu·ªói vƒÉn b·∫£n.

    M·ªói h√†ng c·ªßa ma tr·∫≠n s·∫Ω tr·ªü th√†nh m·ªôt d√≤ng trong chu·ªói,
    v√† c√°c ph·∫ßn t·ª≠ trong m·ªói h√†ng ƒë∆∞·ª£c n·ªëi v·ªõi nhau b·∫±ng m·ªôt kho·∫£ng tr·∫Øng.

    V√≠ d·ª•:
        Input: [[0, 1, 0], [1, 1, 0]]
        Output: "0 1 0\n1 1 0"

    Args:
        matrix (list[list[int]]): Ma tr·∫≠n ch·ª©a c√°c s·ªë nguy√™n (0 ho·∫∑c 1).

    Returns:
        str: Chu·ªói vƒÉn b·∫£n bi·ªÉu di·ªÖn ma tr·∫≠n.
             Tr·∫£ v·ªÅ m·ªôt chu·ªói r·ªóng n·∫øu ma tr·∫≠n ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng.
    """
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫ßu v√†o kh√¥ng ph·∫£i l√† list ho·∫∑c l√† list r·ªóng
    if matrix is None: # Ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi m·ªçi ki·ªÉu d·ªØ li·ªáu
        return ""

    # S·ª≠ d·ª•ng list comprehension ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ng h√†ng th√†nh m·ªôt chu·ªói
    # 1. `map(str, row)`: Chuy·ªÉn m·ªçi s·ªë trong `row` th√†nh chu·ªói.
    # 2. `" ".join(...)`: N·ªëi c√°c chu·ªói s·ªë l·∫°i v·ªõi nhau b·∫±ng kho·∫£ng tr·∫Øng.
    # 3. `for row in matrix`: L·∫∑p qua t·ª´ng h√†ng c·ªßa ma tr·∫≠n.
    row_strings = [" ".join(map(str, row)) for row in matrix]

    # N·ªëi t·∫•t c·∫£ c√°c chu·ªói h√†ng l·∫°i v·ªõi nhau b·∫±ng k√Ω t·ª± xu·ªëng d√≤ng
    return "\n".join(row_strings)
def display_map(matrix, prince_pos=None, princess_pos=None, placeholder=None):
    map_str = ""
    # G·ª¢I √ù: Chuy·ªÉn sang m·ªôt b·∫£ng m√†u kh√°c ƒë·ªÉ d·ªÖ nh√¨n h∆°n
    # ‚¨ú: ƒê∆∞·ªùng ƒëi (0), ü™®: ƒê√° (1), üü©: ƒê∆∞·ªùng ƒë√£ ƒëi (2), ü§¥: Ho√†ng t·ª≠, üë∏: C√¥ng ch√∫a

    for r_idx, row in enumerate(matrix):
        row_str = ""
        for c_idx, cell in enumerate(row):
            pos = (r_idx, c_idx)
            if prince_pos and pos == prince_pos:
                row_str += "ü§¥"
            elif princess_pos and pos == princess_pos:
                row_str += "üë∏"
            elif cell == 2: # ƒê∆∞·ªùng ƒë√£ ƒëi
                row_str += "üü©"
            elif cell == 1: # ƒê√°
                row_str += "ü™®"
            else: # ƒê∆∞·ªùng ƒëi
                row_str += "‚¨ú"
            row_str += "¬† "
        map_str += f"<div style='font-size: 0.75vw; line-height: 1.2; white-space: nowrap;'>{row_str}</div>"

    html_content = f"<div style='overflow-x: auto;'>{map_str}</div>"
    if placeholder:
        placeholder.markdown(html_content, unsafe_allow_html=True)
    else:
        st.markdown(html_content, unsafe_allow_html=True)


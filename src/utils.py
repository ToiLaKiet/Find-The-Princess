from collections import deque
import sys
import streamlit as st
import re
import time
import copy # G·ª¢I √ù: Import th∆∞ vi·ªán copy ƒë·ªÉ t·∫°o b·∫£n sao s√¢u
from utils import *
import random
import numpy as np 

def kenre_python_literal(bando, w_h, w_c, p_h, p_c):
    m = len(bando)
    n = len(bando[0])
    
    # H√†ng ƒë·ª£i, t∆∞∆°ng ƒë∆∞∆°ng q_ready
    q_ready = deque([(w_h, w_c)])
    
    # Ma tr·∫≠n check
    check = [[False for _ in range(n)] for _ in range(m)]
    check[w_h][w_c] = False
    
    # Ma tr·∫≠n mark, d√πng ƒë·ªÉ l∆∞u √¥ cha c·ªßa √¥ hi·ªán t·∫°i 
    # Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã kh√¥ng h·ª£p l·ªá, v√≠ d·ª• (-1, -1)
    mark = [[(-1, -1) for _ in range(n)] for _ in range(m)]

    # 8 h∆∞·ªõng di chuy·ªÉn
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

    while q_ready:
        curr_h, curr_c = q_ready.popleft()

        # N·∫øu t√¨m th·∫•y ƒë√≠ch
        if curr_h == p_h and curr_c == p_c:
            temp = []
            hours = 0
            o_h, o_c = p_h, p_c
            while not (o_h == w_h and o_c == w_c):
                hours += 1
                temp.append((o_h, o_c))
                o_h, o_c = mark[o_h][o_c]

            return temp[::-1]# Tr·∫£ v·ªÅ s·ªë gi·ªù v√† ƒë∆∞·ªùng ƒëi t·ª´ ƒë√≠ch v·ªÅ ngu·ªìn

        # Duy·ªát 8 h∆∞·ªõng xung quanh
        for dr, dc in directions:
            next_h, next_c = curr_h + dr, curr_c + dc

            if (0 <= next_h < m and 0 <= next_c < n and
                bando[next_h][next_c] == 0 and not check[next_h][next_c]):
                
                # ƒê√°nh d·∫•u ƒë√£ thƒÉm
                check[next_h][next_c] = True
                # L∆∞u √¥ cha
                mark[next_h][next_c] = (curr_h, curr_c)
                # Th√™m v√†o h√†ng ƒë·ª£i
                q_ready.append((next_h, next_c))
    
    return -1 # Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi
def parse_matrix_from_text(text_data):
    matrix = []
    lines = text_data.strip().split('\n')
    try:
        for i, line in enumerate(lines):
            line = line.strip()
            if not line: continue
            row_str = re.split(r'\s+', line)
            row_int = [int(num) for num in row_str]
            if any(cell not in [0, 1] for cell in row_int):
                st.error(f"L·ªói ·ªü d√≤ng {i+1}: D·ªØ li·ªáu ch·ª©a gi√° tr·ªã kh√¥ng ph·∫£i 0 ho·∫∑c 1.")
                return None
            matrix.append(row_int)
        if not matrix:
            st.warning("D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng.")
            return None
        first_row_len = len(matrix[0])
        if any(len(r) != first_row_len for r in matrix):
            st.error("L·ªói: C√°c d√≤ng c√≥ s·ªë c·ªôt kh√¥ng ƒë·ªìng nh·∫•t.")
            return None
        # G·ª¢I √ù: B·ªè matrix.reverse() ƒëi. T·ªça ƒë·ªô (0,0) theo list index t·ª± nhi√™n l√† g√≥c tr√™n b√™n tr√°i.
        # ƒêi·ªÅu n√†y gi√∫p logic t·ªça ƒë·ªô nh·∫•t qu√°n h∆°n.
        return matrix
    except ValueError:
        st.error("L·ªói: D·ªØ li·ªáu ch·ª©a k√Ω t·ª± kh√¥ng ph·∫£i l√† s·ªë.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return None
def convert_matrix_to_text(matrix):
    """
    Chuy·ªÉn ƒë·ªïi m·ªôt ma tr·∫≠n (list of lists) th√†nh m·ªôt chu·ªói vƒÉn b·∫£n.

    M·ªói h√†ng c·ªßa ma tr·∫≠n s·∫Ω tr·ªü th√†nh m·ªôt d√≤ng trong chu·ªói,
    v√† c√°c ph·∫ßn t·ª≠ trong m·ªói h√†ng ƒë∆∞·ª£c n·ªëi v·ªõi nhau b·∫±ng m·ªôt kho·∫£ng tr·∫Øng.

    V√≠ d·ª•:
        Input: [[0, 1, 0], [1, 1, 0]]
        Output: "0 1 0\n1 1 0"

    Args:
        matrix (list[list[int]]): Ma tr·∫≠n ch·ª©a c√°c s·ªë nguy√™n (0 ho·∫∑c 1).

    Returns:
        str: Chu·ªói vƒÉn b·∫£n bi·ªÉu di·ªÖn ma tr·∫≠n.
             Tr·∫£ v·ªÅ m·ªôt chu·ªói r·ªóng n·∫øu ma tr·∫≠n ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c r·ªóng.
    """
    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë·∫ßu v√†o kh√¥ng ph·∫£i l√† list ho·∫∑c l√† list r·ªóng
    if matrix is None: # Ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi m·ªçi ki·ªÉu d·ªØ li·ªáu
        return ""

    # S·ª≠ d·ª•ng list comprehension ƒë·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ng h√†ng th√†nh m·ªôt chu·ªói
    # 1. `map(str, row)`: Chuy·ªÉn m·ªçi s·ªë trong `row` th√†nh chu·ªói.
    # 2. `" ".join(...)`: N·ªëi c√°c chu·ªói s·ªë l·∫°i v·ªõi nhau b·∫±ng kho·∫£ng tr·∫Øng.
    # 3. `for row in matrix`: L·∫∑p qua t·ª´ng h√†ng c·ªßa ma tr·∫≠n.
    row_strings = [" ".join(map(str, row)) for row in matrix]

    # N·ªëi t·∫•t c·∫£ c√°c chu·ªói h√†ng l·∫°i v·ªõi nhau b·∫±ng k√Ω t·ª± xu·ªëng d√≤ng
    return "\n".join(row_strings)
def display_map(matrix, prince_pos=None, princess_pos=None, placeholder=None):
    """
    Hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi m·ªôt gi·∫£i ph√°p duy nh·∫•t, thanh l·ªãch:
    - B·∫£n ƒë·ªì lu√¥n n·∫±m g·ªçn trong m·ªôt "h·ªôp" c√≥ k√≠ch th∆∞·ªõc t∆∞∆°ng ƒë·ªëi v·ªõi m√†n h√¨nh.
    - C√°c √¥ b√™n trong t·ª± ƒë·ªông co gi√£n ƒë·ªÉ l·∫•p ƒë·∫ßy "h·ªôp" v√† lu√¥n l√† h√¨nh vu√¥ng.
    - N·ªôi dung (emoji) ƒë∆∞·ª£c ƒë·∫£m b·∫£o kh√¥ng bao gi·ªù tr√†n ra ngo√†i l√†m v·ª° layout.
    """
    # ƒê·ªãnh nghƒ©a CSS.
    css_styles = """
    <style>
        .map-wrapper {
            /* Container n√†y gi√∫p cƒÉn gi·ªØa b·∫£n ƒë·ªì */
            width: 100%;
            display: flex;
            justify-content: center;
        }
        .map-container {
            /* ƒê√¢y l√† "c√°i h·ªôp" c√≥ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh so v·ªõi m√†n h√¨nh */
            width: 45vw; /* Chi·∫øm 45% chi·ªÅu r·ªông m√†n h√¨nh */
            max-width: 90vh; /* NgƒÉn b·∫£n ƒë·ªì qu√° l·ªõn tr√™n m√†n h√¨nh si√™u r·ªông */
            min-width: 300px; /* ƒê·∫£m b·∫£o b·∫£n ƒë·ªì kh√¥ng qu√° nh·ªè tr√™n m√†n h√¨nh h·∫πp */

            /* C√°c thu·ªôc t√≠nh c·ªßa CSS Grid */
            display: grid;
            /* CH√åA KH√ìA #1: Chia chi·ªÅu r·ªông th√†nh N c·ªôt b·∫±ng nhau (1fr = 1 ph·∫ßn) */
            grid-template-columns: repeat(var(--cols), 1fr);
            gap: 2px;
            
            border: 2px solid #555;
            border-radius: 5px;
            padding: 2px;
            background-color: #555;
        }
        .map-cell {
            /* CH√åA KH√ìA #2: T·ª± ƒë·ªông l√†m cho chi·ªÅu cao b·∫±ng chi·ªÅu r·ªông, t·∫°o ra √¥ vu√¥ng ho√†n h·∫£o */
            aspect-ratio: 1 / 1;

            /* CƒÉn gi·ªØa n·ªôi dung (emoji) trong √¥ */
            display: flex;
            justify-content: center;
            align-items: center;

            /* K√≠ch th∆∞·ªõc emoji co gi√£n, t·ªâ l·ªá v·ªõi chi·ªÅu nh·ªè h∆°n c·ªßa m√†n h√¨nh */
            font-size: 2vmin;
            
            /* CH√åA KH√ìA #3: "L√Å CH·∫ÆN B·∫¢O V·ªÜ" - ƒê·∫£m b·∫£o n·ªôi dung kh√¥ng bao gi·ªù tr√†n ra ngo√†i */
            overflow: hidden;

            border-radius: 3px;
        }
        /* ƒê·ªãnh nghƒ©a m√†u s·∫Øc cho t·ª´ng lo·∫°i √¥ */
        .path { background-color: #e9ecef; }
        .wall { background-color: #6c757d; }
        .trail { background-color: #87CEEB; }
    </style>
    """

    matrix_np = np.array(matrix)
    rows, cols = matrix_np.shape

    # B·∫Øt ƒë·∫ßu x√¢y d·ª±ng chu·ªói HTML
    map_cells_html = ""
    for r_idx in range(rows):
        for c_idx in range(cols):
            pos = (r_idx, c_idx)
            content = ""
            cell_class = ""
            
            if prince_pos and pos == prince_pos:
                content = "ü§¥"
                cell_class = "path"
            elif princess_pos and pos == princess_pos:
                content = "üë∏"
                cell_class = "path"
            else:
                cell_type = matrix_np[r_idx, c_idx]
                if cell_type == 2:
                    cell_class = "trail"
                elif cell_type == 1:
                    cell_class = "wall"
                    content = "ü™®"
                else:
                    cell_class = "path"

            map_cells_html += f'<div class="map-cell {cell_class}">{content}</div>'

    # Gh√©p CSS v√† HTML
    final_html = f"""
    {css_styles}
    <div class="map-wrapper">
        <div class="map-container" style="--cols: {cols};">
            {map_cells_html}
        </div>
    </div>
    """

    # X·ª≠ l√Ω ƒë√∫ng c·∫£ hai tr∆∞·ªùng h·ª£p hi·ªÉn th·ªã
    if placeholder:
        placeholder.markdown(final_html, unsafe_allow_html=True)
    else:
        st.markdown(final_html, unsafe_allow_html=True)

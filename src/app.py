import streamlit as st
import re
import time
import copy # G·ª¢I √ù: Import th∆∞ vi·ªán copy ƒë·ªÉ t·∫°o b·∫£n sao s√¢u
from utils import *
from PIL import Image
import random
import numpy as np

uit = Image.open('./assets/logo-uit.png')

st.set_page_config(
    page_title="UIT@CS | ToiLaKiet | K√©n r·ªÉ",
    page_icon=uit,
    layout="wide"
)

# --- D·ªØ li·ªáu m·∫´u ---
DEFAULT_MAP_DATA = """
1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0
0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 1 1 0 0 1 0 0 0 1
0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1
0 0 1 1 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1
0 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0
0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1
0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1
0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1
0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0
0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 1
0 1 1 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 1 1 1 1 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0
0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0
0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0
0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1
0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 0 0 1 0 1 0 0
0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 0 1 1
1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0
0 0 0 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 1 1
0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0
1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1
0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 0
0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0
0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0
0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0 1
0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 0 0 0 0 1 0 1 0
0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0
0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1
1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 0 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0
1 1 0 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 0 0 1
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0
0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0
1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0 0
0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 1
0 0 1 1 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1
0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1
1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 0 0 1
0 1 0 0 0 1 0 1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 1 1 1
1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1
0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1
1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1 0 1 0
1 0 1 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0
1 1 0 0 0 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1
0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0
""".strip()

# --- Kh·ªüi t·∫°o Session State ---
if 'matrix_data' not in st.session_state:
    st.session_state.matrix_data = None
if 'map_confirmed' not in st.session_state:
    st.session_state.map_confirmed = False
if 'prince_pos' not in st.session_state:
    st.session_state.prince_pos = None
if 'princess_pos' not in st.session_state:
    st.session_state.princess_pos = None

# --- Giao di·ªán ·ª©ng d·ª•ng ---
st.title("üó∫Ô∏è UIT@CS112 | K√©n R·ªÉ | ƒêi t√¨m c√¥ng ch√∫a")
st.header("B∆∞·ªõc 1: Nh·∫≠p d·ªØ li·ªáu b·∫£n ƒë·ªì")
map_input_text = st.text_area(
    "D√°n d·ªØ li·ªáu ma tr·∫≠n c·ªßa b·∫°n v√†o ƒë√¢y (0: ƒë∆∞·ªùng ƒëi, 1: ƒë√°).",
    value=convert_matrix_to_text(st.session_state.matrix_data) if st.session_state.matrix_data != None else DEFAULT_MAP_DATA,
    height=250
)
# T·∫°o 2 c·ªôt
col1, col2, col3 = st.columns([1,1,1]) 
st.markdown("""
<style>
    div[data-testid="column"] {
        padding: 0 5px; /* Gi·∫£m kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt */
    }
</style>
""", unsafe_allow_html=True)

with col1:
    if st.button("T·∫°o B·∫£n ƒê·ªì", type="primary", icon="‚öôÔ∏è"):
        st.session_state.map_confirmed = False  
        st.session_state.matrix_data = None  # Reset d·ªØ li·ªáu b·∫£n ƒë·ªì
        parsed_matrix = parse_matrix_from_text(map_input_text)
        if parsed_matrix:
            time.sleep(0.5)  # Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
            st.session_state.matrix_data = parsed_matrix
            st.session_state.rows = len(parsed_matrix)
            st.session_state.cols = len(parsed_matrix[0])
            st.session_state.map_confirmed = True
            # Reset c√°c tr·∫°ng th√°i kh√°c
            st.session_state.prince_pos = None
            st.session_state.princess_pos = None
            st.rerun() # L√†m m·ªõi trang ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì m·ªõi
        else:
            st.session_state.map_confirmed = False
with col2:
    if st.button("Sinh ng·∫´u nhi√™n b·∫£n ƒë·ªì", type="secondary", icon="üé≤"):
        st.session_state.map_confirmed = True
        # Randomly choose rows and columns between 3 and 100
        st.session_state.rows = np.random.randint(3, 101)
        st.session_state.cols = np.random.randint(3, 101)
        # Generate matrix with random 0 or 1
        st.session_state.matrix_data = np.random.randint(0, 2, size=(st.session_state.rows, st.session_state.cols))
with col3:
    if st.button("ƒê·∫∑t L·∫°i", type="secondary", icon="üîÑ"):
        st.session_state.matrix_data = None
        st.session_state.map_confirmed = False
        st.session_state.prince_pos = None
        st.session_state.princess_pos = None
        st.rerun()  # L√†m m·ªõi trang ƒë·ªÉ xo√° b·∫£n ƒë·ªì


if st.session_state.map_confirmed:
    st.success(f"B·∫£n ƒë·ªì ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi k√≠ch th∆∞·ªõc {st.session_state.rows}x{st.session_state.cols}!") 
    st.divider()
    display_map(st.session_state.matrix_data)
    st.divider()

    st.header("B∆∞·ªõc 2: ƒê·∫∑t v·ªã tr√≠ xu·∫•t ph√°t")
    st.caption(f"T·ªça ƒë·ªô d√≤ng t·ª´ 0 ƒë·∫øn {st.session_state.rows - 1}, t·ªça ƒë·ªô c·ªôt t·ª´ 0 ƒë·∫øn {st.session_state.cols - 1}.")

    with st.form(key="positions_form"):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Ho√†ng t·ª≠ ü§¥")
            prince_x = st.number_input("D√≤ng c·ªßa Ho√†ng t·ª≠", 0, st.session_state.rows - 1, 0, 1)
            prince_y = st.number_input("C·ªôt c·ªßa Ho√†ng t·ª≠", 0, st.session_state.cols - 1, 0, 1)
        with col2:
            st.subheader("C√¥ng ch√∫a üë∏")
            princess_x = st.number_input("D√≤ng c·ªßa C√¥ng ch√∫a", 0, st.session_state.rows - 1, st.session_state.rows - 1, 1)
            princess_y = st.number_input("C·ªôt c·ªßa C√¥ng ch√∫a", 0, st.session_state.cols - 1, st.session_state.cols - 1, 1)
        
        # G·ª¢I √ù: T√°ch n√∫t "ƒê·∫∑t v·ªã tr√≠" v√† "T√¨m ƒë∆∞·ªùng" ra
        submit_positions = st.form_submit_button("X√°c nh·∫≠n v·ªã tr√≠")

    if submit_positions:
        prince_pos = (prince_x, prince_y)
        princess_pos = (princess_x, princess_y)
        valid = True
        if st.session_state.matrix_data[prince_x][prince_y] == 1:
            st.error(f"V·ªã tr√≠ Ho√†ng t·ª≠ ({prince_x}, {prince_y}) l√† ƒë√°! ü™®")
            valid = False
        if st.session_state.matrix_data[princess_x][princess_y] == 1:
            st.error(f"V·ªã tr√≠ C√¥ng ch√∫a ({princess_x}, {princess_y}) l√† ƒë√°! ü™®")
            valid = False
        if prince_pos == princess_pos:
            st.error("V·ªã tr√≠ Ho√†ng t·ª≠ v√† C√¥ng ch√∫a kh√¥ng ƒë∆∞·ª£c tr√πng nhau!")
            valid = False
        
        if valid:
            st.session_state.prince_pos = prince_pos
            st.session_state.princess_pos = princess_pos
            st.success("ƒê√£ x√°c nh·∫≠n v·ªã tr√≠! Nh·∫•n n√∫t 'T√¨m ƒë∆∞·ªùng' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        else:
            st.session_state.prince_pos = None
            st.session_state.princess_pos = None

    # Ch·ªâ hi·ªÉn th·ªã b·∫£n ƒë·ªì v·ªõi nh√¢n v·∫≠t v√† n√∫t "T√¨m ƒë∆∞·ªùng" sau khi v·ªã tr√≠ h·ª£p l·ªá
    if st.session_state.prince_pos:
        st.header("B∆∞·ªõc 3: B·∫Øt ƒë·∫ßu h√†nh tr√¨nh")
        st.divider()
        map_placeholder = st.empty()
        display_map(st.session_state.matrix_data, st.session_state.prince_pos, st.session_state.princess_pos,placeholder=map_placeholder)
        st.divider()
        if st.button("T√¨m ƒë∆∞·ªùng ƒëi!", type="primary", icon="üèÉ‚Äç‚ôÇÔ∏è"):
            # G·ª¢I √ù: S·ª≠ d·ª•ng spinner ƒë·ªÉ th√¥ng b√°o cho ng∆∞·ªùi d√πng
            with st.spinner("Ho√†ng t·ª≠ ƒëang d√≤ ƒë∆∞·ªùng..."):
                path = kenre_python_literal(
                    st.session_state.matrix_data,
                    st.session_state.prince_pos[0], st.session_state.prince_pos[1],
                    st.session_state.princess_pos[0], st.session_state.princess_pos[1]
                )
            
            # Ki·ªÉm tra xem c√≥ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi kh√¥ng
            if path != -1:
                st.info(f"ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi v·ªõi {len(path)} b∆∞·ªõc. B·∫Øt ƒë·∫ßu di chuy·ªÉn...")
                # T·∫°o b·∫£n sao c·ªßa ma tr·∫≠n ƒë·ªÉ animation kh√¥ng l√†m thay ƒë·ªïi b·∫£n g·ªëc
                animated_matrix = copy.deepcopy(st.session_state.matrix_data)
                animated_matrix[st.session_state.prince_pos[0]][st.session_state.prince_pos[1]] = 2
                for i, pos in enumerate(path):
                    # ƒê√°nh d·∫•u ƒë∆∞·ªùng ƒëi
                    animated_matrix[pos[0]][pos[1]] = 2
                    
                    # V·ªã tr√≠ ho√†ng t·ª≠ hi·ªán t·∫°i l√† pos
                    current_prince_pos = pos
                    
                    # Hi·ªÉn th·ªã frame hi·ªán t·∫°i
                    display_map(
                        animated_matrix,
                        current_prince_pos,
                        st.session_state.princess_pos,
                        placeholder=map_placeholder
                    )
                    time.sleep(0.15) 
                
                st.success("Th√†nh c√¥ng! Ho√†ng t·ª≠ ƒë√£ c·ª©u ƒë∆∞·ª£c c√¥ng ch√∫a! ‚ù§Ô∏è")
                st.balloons()
            else:
                st.error("R·∫•t ti·∫øc, kh√¥ng c√≥ ƒë∆∞·ªùng n√†o ƒë·ªÉ Ho√†ng t·ª≠ t√¨m C√¥ng ch√∫a. üíî")

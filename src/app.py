import streamlit as st
import re
import time
import copy
from utils import * # Gi·∫£ s·ª≠ utils.py ƒë√£ c√≥ c√°c h√†m c·∫ßn thi·∫øt
from PIL import Image
import numpy as np

# --- C·∫•u h√¨nh trang v√† Kh·ªüi t·∫°o ---
uit = Image.open('./assets/logo-uit.png')
st.set_page_config(page_title="UIT@CS | ToiLaKiet | K√©n r·ªÉ", page_icon=uit, layout="wide")

# D·ªØ li·ªáu m·∫´u (gi·ªØ nguy√™n)
DEFAULT_MAP_DATA = """
1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0
0 0 1 0 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 1 1 0 0 1 0 0 0 1
0 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1
0 0 1 1 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1
0 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0
0 0 0 1 1 0 1 0 0 0 0 1 0 1 0 1 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1
0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1
0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 1
0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 0
0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 1
0 1 1 1 0 1 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 1 1 1 1 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0
0 1 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0
0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0
0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 1 0 0 1
0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 0 1 0 0 1 0 1 0 0
0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 1 0 0 1 1 0 1 1
1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 0 0 0 0 1 1 0 0 1 1 0
0 0 0 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 1 0 0 1 1 0 0 1 0 0 0 1 0 0 0 1 1
0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0
1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 0 1
0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 0
0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 0 1 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0
0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 0 1 0
0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 0 0 1
0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 1 0 0 0 0 0 1 0 1 0
0 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 1 0 1 1 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0
0 0 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 0 1
1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 0 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0
1 1 0 0 0 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1
0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 0 0 0 0 1
0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 1 0 0
0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0
1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 1 1 0 0 0
0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 0 1 1 0 0 0 1 1 0 0 0 1 1
0 0 1 1 0 0 1 0 1 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 1 1
0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1
1 1 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 0 0 1
0 1 0 0 0 1 0 1 0 1 1 0 0 1 1 0 1 1 1 1 0 0 1 0 1 0 0 0 0 1 1 0 0 0 0 1 0 1 0 1 1 0 1 0 0 0 0 1 0 0 1 1 1
1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 1 1
0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1
1 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 0 1 1 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 0 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1 0 1 0
1 0 1 1 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 1 1 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1
0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0
1 1 0 0 0 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 1 0 0 1 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 1
0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 1 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0
""".strip()

# --- Kh·ªüi t·∫°o Session State ---
if 'matrix_data' not in st.session_state:
    st.session_state.matrix_data = None
if 'map_confirmed' not in st.session_state:
    st.session_state.map_confirmed = False
if 'prince_pos' not in st.session_state:
    st.session_state.prince_pos = None
if 'princess_pos' not in st.session_state:
    st.session_state.princess_pos = None
# --- THAY ƒê·ªîI 1: Th√™m bi·∫øn tr·∫°ng th√°i ƒë·ªÉ kh√≥a UI ---
if 'processing' not in st.session_state:
    st.session_state.processing = False

# --- Giao di·ªán ·ª©ng d·ª•ng ---
st.title("üó∫Ô∏è UIT@CS112 | K√©n R·ªÉ | ƒêi t√¨m c√¥ng ch√∫a")
st.header("B∆∞·ªõc 1: Nh·∫≠p d·ªØ li·ªáu b·∫£n ƒë·ªì")

# --- THAY ƒê·ªîI 2: Th√™m `disabled` v√†o t·∫•t c·∫£ c√°c widget t∆∞∆°ng t√°c ---
is_disabled = st.session_state.processing

map_input_text = st.text_area(
    "D√°n d·ªØ li·ªáu ma tr·∫≠n c·ªßa b·∫°n v√†o ƒë√¢y (0: ƒë∆∞·ªùng ƒëi, 1: ƒë√°).",
    value=convert_matrix_to_text(st.session_state.matrix_data) if st.session_state.matrix_data is not None else DEFAULT_MAP_DATA,
    height=250,
    disabled=is_disabled
)

col1, col2, col3 = st.columns([1,1,1])

with col1:
    if st.button("T·∫°o B·∫£n ƒê·ªì", type="primary", icon="‚öôÔ∏è", disabled=is_disabled):
        # Kh√¥ng c·∫ßn kh√≥a UI ·ªü ƒë√¢y v√¨ h√†nh ƒë·ªông n√†y nhanh
        st.session_state.map_confirmed = False
        st.session_state.matrix_data = None
        parsed_matrix = parse_matrix_from_text(map_input_text)
        if parsed_matrix:
            st.session_state.matrix_data = parsed_matrix
            st.session_state.rows = len(parsed_matrix)
            st.session_state.cols = len(parsed_matrix[0])
            st.session_state.map_confirmed = True
            st.session_state.prince_pos = None
            st.session_state.princess_pos = None
            st.rerun()
        else:
            st.session_state.map_confirmed = False
with col2:
    if st.button("Sinh ng·∫´u nhi√™n b·∫£n ƒë·ªì", type="secondary", icon="üé≤", disabled=is_disabled):
        st.session_state.map_confirmed = True
        st.session_state.rows = np.random.randint(3, 101)
        st.session_state.cols = np.random.randint(3, 101)
        st.session_state.matrix_data = np.random.randint(0, 2, size=(st.session_state.rows, st.session_state.cols))
        st.rerun()
with col3:
    if st.button("ƒê·∫∑t L·∫°i", type="secondary", icon="üîÑ", disabled=is_disabled):
        # X√≥a t·∫•t c·∫£ tr·∫°ng th√°i v√† rerun
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

if st.session_state.map_confirmed:
    st.success(f"B·∫£n ƒë·ªì ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi k√≠ch th∆∞·ªõc {st.session_state.rows}x{st.session_state.cols}!")
    st.divider()
    display_map(st.session_state.matrix_data)
    st.divider()

    st.header("B∆∞·ªõc 2: ƒê·∫∑t v·ªã tr√≠ xu·∫•t ph√°t")
    st.caption(f"T·ªça ƒë·ªô d√≤ng t·ª´ 0 ƒë·∫øn {st.session_state.rows - 1}, t·ªça ƒë·ªô c·ªôt t·ª´ 0 ƒë·∫øn {st.session_state.cols - 1}.")

    with st.form(key="positions_form"):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Ho√†ng t·ª≠ ü§¥")
            prince_x = st.number_input("D√≤ng c·ªßa Ho√†ng t·ª≠", 0, st.session_state.rows - 1, 0, 1, disabled=is_disabled)
            prince_y = st.number_input("C·ªôt c·ªßa Ho√†ng t·ª≠", 0, st.session_state.cols - 1, 0, 1, disabled=is_disabled)
        with col2:
            st.subheader("C√¥ng ch√∫a üë∏")
            princess_x = st.number_input("D√≤ng c·ªßa C√¥ng ch√∫a", 0, st.session_state.rows - 1, st.session_state.rows - 1, 1, disabled=is_disabled)
            princess_y = st.number_input("C·ªôt c·ªßa C√¥ng ch√∫a", 0, st.session_state.cols - 1, st.session_state.cols - 1, 1, disabled=is_disabled)

        submit_positions = st.form_submit_button("X√°c nh·∫≠n v·ªã tr√≠", disabled=is_disabled)

    if submit_positions:
        prince_pos = (prince_x, prince_y)
        princess_pos = (princess_x, princess_y)
        valid = True
        if st.session_state.matrix_data[prince_x][prince_y] == 1:
            st.error(f"V·ªã tr√≠ Ho√†ng t·ª≠ ({prince_x}, {prince_y}) l√† ƒë√°! ü™®")
            valid = False
        if st.session_state.matrix_data[princess_x][princess_y] == 1:
            st.error(f"V·ªã tr√≠ C√¥ng ch√∫a ({princess_x}, {princess_y}) l√† ƒë√°! ü™®")
            valid = False
        if prince_pos == princess_pos:
            st.error("V·ªã tr√≠ Ho√†ng t·ª≠ v√† C√¥ng ch√∫a kh√¥ng ƒë∆∞·ª£c tr√πng nhau!")
            valid = False

        if valid:
            st.session_state.prince_pos = prince_pos
            st.session_state.princess_pos = princess_pos
            st.success("ƒê√£ x√°c nh·∫≠n v·ªã tr√≠! Nh·∫•n n√∫t 'T√¨m ƒë∆∞·ªùng' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        else:
            st.session_state.prince_pos = None
            st.session_state.princess_pos = None

    if st.session_state.prince_pos:
        st.header("B∆∞·ªõc 3: B·∫Øt ƒë·∫ßu h√†nh tr√¨nh")
        st.divider()
        map_placeholder = st.empty()
        display_map(st.session_state.matrix_data, st.session_state.prince_pos, st.session_state.princess_pos, placeholder=map_placeholder)
        st.divider()

        if st.button("T√¨m ƒë∆∞·ªùng ƒëi!", type="primary", icon="üèÉ‚Äç‚ôÇÔ∏è", disabled=is_disabled):
            # --- THAY ƒê·ªîI 3: S·ª≠ d·ª•ng try...finally ƒë·ªÉ ƒë·∫£m b·∫£o UI lu√¥n ƒë∆∞·ª£c m·ªü kh√≥a ---
            st.session_state.processing = True
            st.rerun() # Rerun ngay ƒë·ªÉ v√¥ hi·ªáu h√≥a c√°c n√∫t

# --- THAY ƒê·ªîI 4: T√°ch logic x·ª≠ l√Ω n·∫∑ng ra kh·ªèi lu·ªìng ch√≠nh ---
# Kh·ªëi code n√†y ch·ªâ ch·∫°y khi `processing` l√† True
if st.session_state.get('processing', False):
    try:
        # L·∫•y l·∫°i c√°c bi·∫øn c·∫ßn thi·∫øt t·ª´ session state
        matrix = st.session_state.matrix_data
        prince_pos = st.session_state.prince_pos
        princess_pos = st.session_state.princess_pos
        
        # T·∫°o placeholder ·ªü ƒë√¢y ƒë·ªÉ n√≥ kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi c√°c l·∫ßn rerun tr∆∞·ªõc
        st.header("B∆∞·ªõc 3: B·∫Øt ƒë·∫ßu h√†nh tr√¨nh")
        st.divider()
        map_placeholder = st.empty()
        st.divider()

        with st.spinner("Ho√†ng t·ª≠ ƒëang d√≤ ƒë∆∞·ªùng..."):
            path = kenre_python_literal(matrix, prince_pos[0], prince_pos[1], princess_pos[0], princess_pos[1])
        print(path)
        if path != -1:
            st.info(f"ƒê√£ t√¨m th·∫•y ƒë∆∞·ªùng ƒëi v·ªõi {len(path)} b∆∞·ªõc. B·∫Øt ƒë·∫ßu di chuy·ªÉn...")
            animated_matrix = copy.deepcopy(matrix)
            animated_matrix[prince_pos[0]][prince_pos[1]] = 2
            
            for i, pos in enumerate(path):
                animated_matrix[pos[0]][pos[1]] = 2
                current_prince_pos = pos
                display_map(animated_matrix, current_prince_pos, princess_pos, placeholder=map_placeholder)
                time.sleep(0.15)
            
            st.success("Th√†nh c√¥ng! Ho√†ng t·ª≠ ƒë√£ c·ª©u ƒë∆∞·ª£c c√¥ng ch√∫a! ‚ù§Ô∏è")
            st.balloons()
        else:
            st.error("R·∫•t ti·∫øc, kh√¥ng c√≥ ƒë∆∞·ªùng n√†o ƒë·ªÉ Ho√†ng t·ª≠ t√¨m C√¥ng ch√∫a. üíî")
    finally:
        # D√π th√†nh c√¥ng hay th·∫•t b·∫°i, lu√¥n m·ªü kh√≥a UI
        st.session_state.processing = False
        st.rerun() # Rerun l·∫ßn cu·ªëi ƒë·ªÉ k√≠ch ho·∫°t l·∫°i c√°c n√∫t
